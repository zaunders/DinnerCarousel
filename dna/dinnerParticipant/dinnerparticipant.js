'use strict';

// -----------------------------------------------------------------
//  This stub Zome code file was auto-generated by hc-scaffold
// -----------------------------------------------------------------

// -----------------------------------------------------------------
//  Exposed functions with custom logic https://developer.holochain.org/API_reference
// -----------------------------------------------------------------

function food_needsCreate (food_needsEntry) {
  var food_needsHash = commit("food_needs", food_needsEntry);
  return food_needsHash;
}

function food_needsRead (food_needsHash) {
  var food_needs = get(food_needsHash);
  return food_needs;
}

function food_needsUpdate (food_needsHash) {
  var sampleValue={"allergies":["nuts"],"diet":["paleo"],"strong_dislikes":["milk"],"extraField":true};
  var food_needsOutHash = update("food_needs", sampleValue, food_needsHash);
  return food_needsOutHash;
}

function food_needsDelete (food_needsHash) {
  var result = remove(food_needsHash, "");
  return result;
}

function familyCreate (familyEntry) {
  var familyHash = commit("family", familyEntry);
  return familyHash;
}

function familyRead (familyHash) {
  var family = get(familyHash);
  return family;
}

function familyUpdate (familyHash) {
  var sampleValue={"partner":true,"kids":{"age":5,"will_bring_food_for":true},"link_to_other":"hash of user","extraField":true};
  var familyOutHash = update("family", sampleValue, familyHash);
  return familyOutHash;
}

function familyDelete (familyHash) {
  var result = remove(familyHash, "");
  return result;
}

function accepted_dinner_start_timeCreate (accepted_dinner_start_timeEntry) {
  var accepted_dinner_start_timeHash = commit("accepted_dinner_start_time", accepted_dinner_start_timeEntry);
  return accepted_dinner_start_timeHash;
}

function accepted_dinner_start_timeRead (accepted_dinner_start_timeHash) {
  var accepted_dinner_start_time = get(accepted_dinner_start_timeHash);
  return accepted_dinner_start_time;
}

function accepted_dinner_start_timeUpdate (accepted_dinner_start_timeHash) {
  var sampleValue={"accepted_dinner_start_time":[17],"extraField":true};
  var accepted_dinner_start_timeOutHash = update("accepted_dinner_start_time", sampleValue, accepted_dinner_start_timeHash);
  return accepted_dinner_start_timeOutHash;
}

function accepted_dinner_start_timeDelete (accepted_dinner_start_timeHash) {
  var result = remove(accepted_dinner_start_timeHash, "");
  return result;
}

function hosting_adressCreate (hosting_adressEntry) {
  var hosting_adressHash = commit("hosting_adress", hosting_adressEntry);
  return hosting_adressHash;
}

function hosting_adressRead (hosting_adressHash) {
  var hosting_adress = get(hosting_adressHash);
  return hosting_adress;
}

function hosting_adressUpdate (hosting_adressHash) {
  var sampleValue={"checked":true,"adress":{"street":"Backavägen 8","zip":26868,"City":"Röstånga","Country":"Sweden"},"GPS":{"lat":55.99958030000001,"long":13.28495190000001},"extraField":true};
  var hosting_adressOutHash = update("hosting_adress", sampleValue, hosting_adressHash);
  return hosting_adressOutHash;
}

function max_group_sizeCreate (max_group_sizeEntry) {
  var max_group_sizeHash = commit("max_group_size", max_group_sizeEntry);
  return max_group_sizeHash;
}

function max_group_sizeRead (max_group_sizeHash) {
  var max_group_size = get(max_group_sizeHash);
  return max_group_size;
}

function max_group_sizeUpdate (max_group_sizeHash) {
  var sampleValue={"max_group_size":12,"extraField":true};
  var max_group_sizeOutHash = update("max_group_size", sampleValue, max_group_sizeHash);
  return max_group_sizeOutHash;
}

function max_group_sizeDelete (max_group_sizeHash) {
  var result = remove(max_group_sizeHash, "");
  return result;
}

function hosting_meterCreate (hosting_meterEntry) {
  var hosting_meterHash = commit("hosting_meter", hosting_meterEntry);
  return hosting_meterHash;
}

function hosting_meterRead (hosting_meterHash) {
  var hosting_meter = get(hosting_meterHash);
  return hosting_meter;
}

function hosting_meterUpdate (hosting_meterHash) {
  var sampleValue={"hosting_meter":10,"extraField":true};
  var hosting_meterOutHash = update("hosting_meter", sampleValue, hosting_meterHash);
  return hosting_meterOutHash;
}

function available_on_dateCreate (available_on_dateEntry) {
  var available_on_dateHash = commit("available_on_date", available_on_dateEntry);
  return available_on_dateHash;
}

function available_on_dateRead (available_on_dateHash) {
  var available_on_date = get(available_on_dateHash);
  return available_on_date;
}

function available_on_dateUpdate (available_on_dateHash) {
  var sampleValue={"available_on_dates":["2019-01-01"],"extraField":true};
  var available_on_dateOutHash = update("available_on_date", sampleValue, available_on_dateHash);
  return available_on_dateOutHash;
}

function available_on_dateDelete (available_on_dateHash) {
  var result = remove(available_on_dateHash, "");
  return result;
}

function set_food_needs (params) {
  // your custom code here
  return {};
}

function set_family (params) {
  // your custom code here
  return {};
}

function set_accepted_time (params) {
  // your custom code here
  return {};
}

function add_recipie (params) {
  // your custom code here
  return {};
}

function remove_recipie (params) {
  // your custom code here
  return {};
}

function add_dates (params) {
  // your custom code here
  return {};
}

function remove_dates (params) {
  // your custom code here
  return {};
}

function join_group (params) {
  // your custom code here
  return {};
}

function leave_group (params) {
  // your custom code here
  return {};
}

function accept_dinner_invite (params) {
  // your custom code here
  return {};
}

function decline_dinner_invite (params) {
  // your custom code here
  return {};
}

function cancel_dinner (params) {
  // your custom code here
  return {};
}


// -----------------------------------------------------------------
//  The Genesis Function https://developer.holochain.org/genesis
// -----------------------------------------------------------------

/**
 * Called only when your source chain is generated
 * @return {boolean} success
 */
function genesis () {
  return true;
}

// -----------------------------------------------------------------
//  Validation functions for every change to the local chain or DHT
// -----------------------------------------------------------------

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateCommit (entryName, entry, header, pkg, sources) {
  switch (entryName) {
    case "food_needs":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "family":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "accepted_dinner_start_time":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_adress":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "max_group_size":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "recepies_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_meter":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "in_group_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "available_on_date":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validatePut (entryName, entry, header, pkg, sources) {
  switch (entryName) {
    case "food_needs":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "family":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "accepted_dinner_start_time":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_adress":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "max_group_size":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "recepies_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_meter":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "in_group_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "available_on_date":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {string} replaces - the hash for the entry being updated
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateMod (entryName, entry, header, replaces, pkg, sources) {
  switch (entryName) {
    case "food_needs":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "family":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "accepted_dinner_start_time":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_adress":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "max_group_size":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "recepies_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_meter":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "in_group_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "available_on_date":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {string} hash - the hash of the entry to remove
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateDel (entryName, hash, pkg, sources) {
  switch (entryName) {
    case "food_needs":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "family":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "accepted_dinner_start_time":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_adress":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "max_group_size":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "recepies_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_meter":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "in_group_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "available_on_date":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {string} baseHash - the hash of the base entry being linked
 * @param {?} links - ?
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateLink (entryName, baseHash, links, pkg, sources) {
  switch (entryName) {
    case "food_needs":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "family":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "accepted_dinner_start_time":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_adress":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "min_group_size":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "max_group_size":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "recepies_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "hosting_meter":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "in_group_links":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    case "available_on_date":
      // be sure to consider many edge cases for validating
      // do not just flip this to true without considering what that means
      // the action will ONLY be successfull if this returns true, so watch out!
      return true;
    default:
      // invalid entry name
      return true;
  }
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validatePutPkg (entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateModPkg (entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateDelPkg (entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateLinkPkg (entryName) {
  return null;
}
